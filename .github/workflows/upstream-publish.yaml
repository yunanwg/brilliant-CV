name: Trigger PR Creation for Upstream Publishing

on:
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Test version number (e.g., 2.0.7-test)'
        required: true
        default: '2.0.7-test'
        type: string
      dry_run:
        description: 'Dry run (skip actual PR creation)'
        type: boolean
        default: false
        
permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  test-create-upstream-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract and validate version
        id: version
        run: |
          # Handle empty or missing input with fallback
          VERSION="${{ github.event.inputs.test_version }}"
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          
          # Fallback to defaults if inputs are empty
          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            echo "‚ö†Ô∏è test_version input is empty, using default"
            VERSION="2.0.7-test"
          fi
          
          if [ -z "$DRY_RUN" ] || [ "$DRY_RUN" = "null" ]; then
            echo "‚ö†Ô∏è dry_run input is empty, using default"
            DRY_RUN="true"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "dry_run=$DRY_RUN" >> $GITHUB_OUTPUT
          echo "Final Version: $VERSION"
          echo "Final Dry Run: $DRY_RUN"
          
          # Validate version format (allow test suffix)
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-test)?$'; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-test (e.g., 2.0.7-test)"
            exit 1
          fi
          echo "‚úÖ Version format valid: $VERSION"

      - name: Update typst.toml version
        run: |
          # Create backup and update version
          cp typst.toml typst.toml.backup
          sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.version }}"/' typst.toml
          
          echo "=== Updated typst.toml ==="
          echo "Original version:"
          grep '^version = ' typst.toml.backup
          echo "New version:"
          grep '^version = ' typst.toml

      - name: Prepare package files
        run: |
          # Create package directory structure
          PACKAGE_DIR="packages/preview/brilliant-cv/${{ steps.version.outputs.version }}"
          mkdir -p "$PACKAGE_DIR"
          
          echo "=== Preparing package files ==="
          echo "Target directory: $PACKAGE_DIR"
          
          # Copy all files except excluded ones (from typst.toml exclude list)
          rsync -av \
            --exclude='.git' \
            --exclude='docs' \
            --exclude='.pre-commit-config.yaml' \
            --exclude='.gitignore' \
            --exclude='.github' \
            --exclude='packages' \
            --exclude='typst.toml.backup' \
            . "$PACKAGE_DIR/"
          
          echo "=== Package structure ==="
          find "$PACKAGE_DIR" -type f | sort
          
          echo "=== Package typst.toml content ==="
          cat "$PACKAGE_DIR/typst.toml"
          
          echo "=== Package size ==="
          du -sh "$PACKAGE_DIR"
          
          # Validate required files exist
          if [ ! -f "$PACKAGE_DIR/typst.toml" ]; then
            echo "‚ùå Missing typst.toml in package"
            exit 1
          fi
          
          if [ ! -f "$PACKAGE_DIR/lib.typ" ]; then
            echo "‚ùå Missing lib.typ (entrypoint) in package"
            exit 1
          fi
          
          echo "‚úÖ Package validation passed"

      - name: Test repository operations (dry run)
        if: ${{ steps.version.outputs.dry_run == 'true' }}
        run: |
          echo "=== DRY RUN MODE ==="
          echo "Would target repository: yunanwg/our-Typst-packages"
          echo "Would create branch: brilliant-cv-${{ steps.version.outputs.version }}"
          echo "Would create PR with title: [TEST] Add brilliant-cv v${{ steps.version.outputs.version }}"
          echo "Package files prepared in: packages/preview/brilliant-cv/${{ steps.version.outputs.version }}"
          echo "‚úÖ Dry run completed successfully"

      - name: Create PR in forked repository
        if: ${{ steps.version.outputs.dry_run == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Creating PR in forked repository ==="
          
          # Set up git config
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Clone the forked repository using GitHub CLI
          gh repo clone yunanwg/our-Typst-packages temp-fork
          cd temp-fork
          
          # Sync with upstream
          git remote add upstream https://github.com/typst/packages.git
          git fetch upstream main
          git checkout main
          git reset --hard upstream/main
          
          # Create new branch
          BRANCH_NAME="brilliant-cv-${{ steps.version.outputs.version }}"
          git checkout -b "$BRANCH_NAME"
          
          # Copy package files
          mkdir -p "packages/preview/brilliant-cv"
          cp -r "../packages/preview/brilliant-cv/${{ steps.version.outputs.version }}" "packages/preview/brilliant-cv/"
          
          # Commit changes
          git add .
          git commit -m "feat: add brilliant-cv v${{ steps.version.outputs.version }} (TEST)

          This is a TEST submission for the automated upstream publishing workflow.
          
          Package Details:
          - Name: brilliant-cv
          - Version: ${{ steps.version.outputs.version }}
          - Repository: ${{ github.server_url }}/${{ github.repository }}
          - Test workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          Description:
          üíº another CV template for your job application, yet powered by Typst and more
          
          Features:
          - Separation of style and content
          - Quick visual customizations  
          - Multilingual support (EN, FR, DE, CN, IT)
          - AI Prompt and Keywords Injection
          
          ‚ö†Ô∏è This is a TEST PR - DO NOT MERGE to production typst/packages"
          
          # Push branch and create PR using GitHub CLI
          git push -u origin "$BRANCH_NAME"
          
          gh pr create \
            --repo yunanwg/our-Typst-packages \
            --title "[TEST] Add brilliant-cv v${{ steps.version.outputs.version }}" \
            --body "üß™ **This is a TEST PR for the automated upstream publishing workflow**

          **‚ö†Ô∏è DO NOT MERGE** - This is for testing the automation workflow only.

          ## Test Details
          - **Package**: brilliant-cv  
          - **Version**: ${{ steps.version.outputs.version }}
          - **Source Repository**: ${{ github.server_url }}/${{ github.repository }}
          - **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ## Package Information
          **Description**: üíº another CV template for your job application, yet powered by Typst and more

          **Key Features**:
          - ‚ú® Separation of style and content
          - üé® Quick visual customizations
          - üåç Multilingual support (English, French, German, Chinese, Italian)
          - ü§ñ AI Prompt and Keywords Injection
          - üìÑ Both CV and Cover Letter templates

          **Categories**: cv, languages, layout
          **License**: Apache-2.0

          ## Files Added
          \`\`\`
          packages/preview/brilliant-cv/${{ steps.version.outputs.version }}/
          ‚îú‚îÄ‚îÄ lib.typ (entrypoint)
          ‚îú‚îÄ‚îÄ typst.toml (manifest)
          ‚îú‚îÄ‚îÄ cv.typ
          ‚îú‚îÄ‚îÄ letter.typ
          ‚îú‚îÄ‚îÄ template/ (template files)
          ‚îú‚îÄ‚îÄ utils/ (utility modules)
          ‚îî‚îÄ‚îÄ ... (other package files)
          \`\`\`

          ## Testing Checklist
          - [x] Package structure follows Typst packages format
          - [x] typst.toml manifest is valid
          - [x] Version format is correct
          - [x] Entrypoint file exists
          - [x] Template files are included
          - [x] Excluded files are properly filtered

          ---
          *This PR was automatically created by the upstream publishing workflow test.*" \
            --head "$BRANCH_NAME" \
            --base main

          echo "‚úÖ Test PR created successfully"

      - name: Upload package as artifact
        if: ${{ steps.version.outputs.dry_run == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: brilliant-cv-${{ steps.version.outputs.version }}
          path: packages/preview/brilliant-cv/${{ steps.version.outputs.version }}/
          retention-days: 7

      - name: Test summary and next steps
        run: |
          echo "=== TEST COMPLETED ==="
          echo "‚úÖ Test version: ${{ steps.version.outputs.version }}"
          echo "‚úÖ Dry run: ${{ steps.version.outputs.dry_run }}"
          echo "‚úÖ Target repository: yunanwg/our-Typst-packages"
          
          if [ "${{ steps.version.outputs.dry_run }}" = "true" ]; then
            echo ""
            echo "üîç **DRY RUN RESULTS:**"
            echo "- Package files prepared successfully"
            echo "- No actual repository changes made"
            echo "- Ready for live test"
            echo ""
            echo "üí° **Next Steps:**"
            echo "1. Review the package structure above"
            echo "2. Run again with 'Dry run: false' to create actual PR"
          else
            echo ""
            echo "üöÄ **LIVE TEST RESULTS:**"
            echo "- Package files prepared and uploaded as artifacts"
            echo "- Test PR created in: https://github.com/yunanwg/our-Typst-packages"
            echo "- Package location: packages/preview/brilliant-cv/${{ steps.version.outputs.version }}"
            echo ""
            echo "üí° **Next Steps:**"
            echo "1. Visit your forked repository to review the PR"
            echo "2. Test the package structure and files"
            echo "3. If everything looks good, adapt for production workflow"
            echo "4. Clean up test PR when done"
          fi
          
          # Restore original typst.toml
          if [ -f "typst.toml.backup" ]; then
            mv typst.toml.backup typst.toml
            echo "‚úÖ Original typst.toml restored"
          fi
