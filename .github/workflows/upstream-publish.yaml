name: Create PR for Upstream Publishing

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 2.0.7 or 2.0.7-test)'
        required: true
        default: '2.0.7'
        type: string
        
permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  create-upstream-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract and validate version
        id: version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # Fallback to default if input is empty
          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            echo "‚ö†Ô∏è version input is empty, using default"
            VERSION="2.0.7"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
          # Validate version format (allow test suffix)
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-test)?$'; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-test (e.g., 2.0.7 or 2.0.7-test)"
            exit 1
          fi
          echo "‚úÖ Version format valid: $VERSION"

      - name: Update typst.toml version
        run: |
          # Create backup and update version
          cp typst.toml typst.toml.backup
          sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.version }}"/' typst.toml
          
          echo "=== Updated typst.toml ==="
          echo "Original version:"
          grep '^version = ' typst.toml.backup
          echo "New version:"
          grep '^version = ' typst.toml

      - name: Prepare package files
        run: |
          # Create package directory structure
          PACKAGE_DIR="packages/preview/brilliant-cv/${{ steps.version.outputs.version }}"
          mkdir -p "$PACKAGE_DIR"
          
          echo "=== Preparing package files ==="
          echo "Target directory: $PACKAGE_DIR"
          
          # Copy all files except excluded ones (from typst.toml exclude list)
          rsync -av \
            --exclude='.git' \
            --exclude='docs' \
            --exclude='.pre-commit-config.yaml' \
            --exclude='.gitignore' \
            --exclude='.github' \
            --exclude='packages' \
            --exclude='typst.toml.backup' \
            . "$PACKAGE_DIR/"
          
          echo "=== Package structure ==="
          find "$PACKAGE_DIR" -type f | sort
          
          echo "=== Package typst.toml content ==="
          cat "$PACKAGE_DIR/typst.toml"
          
          echo "=== Package size ==="
          du -sh "$PACKAGE_DIR"
          
          # Validate required files exist
          if [ ! -f "$PACKAGE_DIR/typst.toml" ]; then
            echo "‚ùå Missing typst.toml in package"
            exit 1
          fi
          
          if [ ! -f "$PACKAGE_DIR/lib.typ" ]; then
            echo "‚ùå Missing lib.typ (entrypoint) in package"
            exit 1
          fi
          
          echo "‚úÖ Package validation passed"

      - name: Create test PR in forked repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Creating test PR in forked repository ==="
          
          # Set up git config
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Clone YOUR forked repository
          gh repo clone yunanwg/our-Typst-packages temp-fork
          cd temp-fork
          
          # Create new branch directly (no upstream syncing needed for testing!)
          BRANCH_NAME="test-brilliant-cv-${{ steps.version.outputs.version }}"
          git checkout -b "$BRANCH_NAME"
          
          # Copy package files
          mkdir -p "packages/preview/brilliant-cv"
          cp -r "../packages/preview/brilliant-cv/${{ steps.version.outputs.version }}" "packages/preview/brilliant-cv/"
          
          # Commit changes
          git add .
          git commit -m "test: add brilliant-cv v${{ steps.version.outputs.version }} (TEST)

          This is a TEST of the automated upstream publishing workflow.
          
          Package: brilliant-cv v${{ steps.version.outputs.version }}
          Source: ${{ github.server_url }}/${{ github.repository }}
          
          ‚ö†Ô∏è This is just a TEST - testing the automation workflow"
          
          # Configure git to use GitHub token for authentication
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/yunanwg/our-Typst-packages.git"
          
          # Push branch
          git push -u origin "$BRANCH_NAME"
          
          # Create test PR
          gh pr create \
            --repo yunanwg/our-Typst-packages \
            --title "[TEST] brilliant-cv v${{ steps.version.outputs.version }}" \
            --body "üß™ **TEST PR** - Testing the automated workflow

          This PR tests the package submission automation.
          
          - Package: brilliant-cv v${{ steps.version.outputs.version }}
          - Source: ${{ github.server_url }}/${{ github.repository }}
          - Files added to: \`packages/preview/brilliant-cv/${{ steps.version.outputs.version }}/\`
          
          This is just a test of the automation - not a real submission." \
            --head "$BRANCH_NAME" \
            --base main

          echo "‚úÖ Test PR created successfully in your forked repository"

      - name: Upload package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: brilliant-cv-${{ steps.version.outputs.version }}
          path: packages/preview/brilliant-cv/${{ steps.version.outputs.version }}/
          retention-days: 7

      - name: Test Summary
        run: |
          echo "=== TEST COMPLETED ==="
          echo "‚úÖ Version: ${{ steps.version.outputs.version }}"
          echo "‚úÖ Test PR created in: yunanwg/our-Typst-packages"
          echo "‚úÖ Package uploaded as workflow artifact"
          echo ""
          echo "üîó **Next Steps:**"
          echo "1. Visit https://github.com/yunanwg/our-Typst-packages to review the test PR"
          echo "2. Verify the package structure and files look correct"
          echo "3. If everything works, the workflow is ready!"
          echo "4. For production: adapt to target the real typst/packages repo"
          
          # Restore original typst.toml
          if [ -f "typst.toml.backup" ]; then
            mv typst.toml.backup typst.toml
            echo "‚úÖ Original typst.toml restored"
          fi