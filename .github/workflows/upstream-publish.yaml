name: Trigger PR Creation for Upstream Publishing

on:
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Test version number (e.g., 2.0.7-test)'
        required: true
        default: '2.0.7-test'
        type: string
      dry_run:
        description: 'Dry run (skip actual PR creation)'
        type: boolean
        default: false

  push:
    branches: [ feat-upstream-publish-automation ]
    paths: [ '.github/workflows/upstream-publish.yaml' ]

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  test-create-upstream-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract and validate version
        id: version
        run: |
          # Handle empty or missing input with fallback
          VERSION="${{ github.event.inputs.test_version }}"
          DRY_RUN="${{ github.event.inputs.dry_run }}"
          
          # Fallback to defaults if inputs are empty
          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            echo "‚ö†Ô∏è test_version input is empty, using default"
            VERSION="2.0.7-test"
          fi
          
          if [ -z "$DRY_RUN" ] || [ "$DRY_RUN" = "null" ]; then
            echo "‚ö†Ô∏è dry_run input is empty, using default"
            DRY_RUN="true"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "dry_run=$DRY_RUN" >> $GITHUB_OUTPUT
          echo "Final Version: $VERSION"
          echo "Final Dry Run: $DRY_RUN"
          
          # Validate version format (allow test suffix)
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-test)?$'; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-test (e.g., 2.0.7-test)"
            exit 1
          fi
          echo "‚úÖ Version format valid: $VERSION"

      - name: Update typst.toml version
        run: |
          # Create backup and update version
          cp typst.toml typst.toml.backup
          sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.version }}"/' typst.toml
          
          echo "=== Updated typst.toml ==="
          echo "Original version:"
          grep '^version = ' typst.toml.backup
          echo "New version:"
          grep '^version = ' typst.toml

      - name: Prepare package files
        run: |
          # Create package directory structure
          PACKAGE_DIR="packages/preview/brilliant-cv/${{ steps.version.outputs.version }}"
          mkdir -p "$PACKAGE_DIR"
          
          echo "=== Preparing package files ==="
          echo "Target directory: $PACKAGE_DIR"
          
          # Copy all files except excluded ones (from typst.toml exclude list)
          rsync -av \
            --exclude='.git' \
            --exclude='docs' \
            --exclude='.pre-commit-config.yaml' \
            --exclude='.gitignore' \
            --exclude='.github' \
            --exclude='packages' \
            --exclude='typst.toml.backup' \
            . "$PACKAGE_DIR/"
          
          echo "=== Package structure ==="
          find "$PACKAGE_DIR" -type f | sort
          
          echo "=== Package typst.toml content ==="
          cat "$PACKAGE_DIR/typst.toml"
          
          echo "=== Package size ==="
          du -sh "$PACKAGE_DIR"
          
          # Validate required files exist
          if [ ! -f "$PACKAGE_DIR/typst.toml" ]; then
            echo "‚ùå Missing typst.toml in package"
            exit 1
          fi
          
          if [ ! -f "$PACKAGE_DIR/lib.typ" ]; then
            echo "‚ùå Missing lib.typ (entrypoint) in package"
            exit 1
          fi
          
          echo "‚úÖ Package validation passed"

      - name: Create package archive
        if: ${{ steps.version.outputs.dry_run == 'false' }}
        run: |
          echo "=== Creating package archive ==="
          
          # Create a tar archive of the package
          cd packages/preview/brilliant-cv/
          tar -czf "../../../brilliant-cv-${{ steps.version.outputs.version }}.tar.gz" "${{ steps.version.outputs.version }}/"
          cd ../../../
          
          echo "Package archive created: brilliant-cv-${{ steps.version.outputs.version }}.tar.gz"
          ls -la *.tar.gz

      - name: Test repository operations (dry run)
        if: ${{ steps.version.outputs.dry_run == 'true' }}
        run: |
          echo "=== DRY RUN MODE ==="
          echo "Would target repository: yunanwg/our-Typst-packages"
          echo "Would create branch: brilliant-cv-${{ steps.version.outputs.version }}"
          echo "Would create PR with title: [TEST] Add brilliant-cv v${{ steps.version.outputs.version }}"
          echo "Package files prepared in: packages/preview/brilliant-cv/${{ steps.version.outputs.version }}"
          echo "‚úÖ Dry run completed successfully"

      - name: Create test issue with package info
        if: ${{ steps.version.outputs.dry_run == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Creating test issue in forked repository ==="
          
          # Create an issue in your forked repository with package details
          gh issue create \
            --repo yunanwg/our-Typst-packages \
            --title "[TEST] Package Ready: brilliant-cv v${{ steps.version.outputs.version }}" \
            --body "üß™ **TEST Package Submission Ready**

          **‚ö†Ô∏è This is a TEST issue** - Package files are ready for manual PR creation.

          ## Package Details
          - **Package**: brilliant-cv  
          - **Version**: ${{ steps.version.outputs.version }}
          - **Source Repository**: ${{ github.server_url }}/${{ github.repository }}
          - **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ## Package Information
          **Description**: üíº another CV template for your job application, yet powered by Typst and more

          **Key Features**:
          - ‚ú® Separation of style and content
          - üé® Quick visual customizations
          - üåç Multilingual support (English, French, German, Chinese, Italian)
          - ü§ñ AI Prompt and Keywords Injection
          - üìÑ Both CV and Cover Letter templates

          **Categories**: cv, languages, layout
          **License**: Apache-2.0

          ## Next Steps
          1. Download the package files from the workflow artifacts
          2. Manually create a branch in the forked repository
          3. Add the package files to \`packages/preview/brilliant-cv/${{ steps.version.outputs.version }}/\`
          4. Create a PR manually

          ## Package Structure
          \`\`\`
          packages/preview/brilliant-cv/${{ steps.version.outputs.version }}/
          ‚îú‚îÄ‚îÄ lib.typ (entrypoint)
          ‚îú‚îÄ‚îÄ typst.toml (manifest)
          ‚îú‚îÄ‚îÄ cv.typ
          ‚îú‚îÄ‚îÄ letter.typ
          ‚îú‚îÄ‚îÄ template/ (template files)
          ‚îú‚îÄ‚îÄ utils/ (utility modules)
          ‚îî‚îÄ‚îÄ ... (other package files)
          \`\`\`

          ---
          *This issue was automatically created by the upstream publishing workflow test.*"

          echo "‚úÖ Test issue created in forked repository"

      - name: Upload package as artifact
        if: ${{ steps.version.outputs.dry_run == 'false' }}
        uses: actions/upload-artifact@v4
        with:
          name: brilliant-cv-${{ steps.version.outputs.version }}
          path: packages/preview/brilliant-cv/${{ steps.version.outputs.version }}/
          retention-days: 7

      - name: Test summary and next steps
        run: |
          echo "=== TEST COMPLETED ==="
          echo "‚úÖ Test version: ${{ steps.version.outputs.version }}"
          echo "‚úÖ Dry run: ${{ steps.version.outputs.dry_run }}"
          echo "‚úÖ Target repository: yunanwg/our-Typst-packages"
          
          if [ "${{ steps.version.outputs.dry_run }}" = "true" ]; then
            echo ""
            echo "üîç **DRY RUN RESULTS:**"
            echo "- Package files prepared successfully"
            echo "- No actual repository changes made"
            echo "- Ready for live test"
            echo ""
            echo "üí° **Next Steps:**"
            echo "1. Review the package structure above"
            echo "2. Run again with 'Dry run: false' to create test issue and artifacts"
          else
            echo ""
            echo "üöÄ **LIVE TEST RESULTS:**"
            echo "- Package files prepared and uploaded as artifacts"
            echo "- Test issue created in: https://github.com/yunanwg/our-Typst-packages"
            echo "- Package location: packages/preview/brilliant-cv/${{ steps.version.outputs.version }}"
            echo ""
            echo "üí° **Next Steps:**"
            echo "1. Check the created issue in your forked repository"
            echo "2. Download the workflow artifacts"
            echo "3. Manually test creating a PR with the package files"
            echo "4. If everything works, proceed to create production workflow"
          fi
          
          # Restore original typst.toml
          if [ -f "typst.toml.backup" ]; then
            mv typst.toml.backup typst.toml
            echo "‚úÖ Original typst.toml restored"
          fi
