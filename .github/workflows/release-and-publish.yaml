name: Release and Publish to Typst Packages

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 2.0.7 or 2.0.7-test)'
        required: true
        default: '2.0.6'
        type: string
        
permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  release-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract and validate version
        id: version
        run: |
          # Extract version from different trigger sources
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Extract version from tag push (remove 'v' prefix if present)
            VERSION="${{ github.ref_name }}"
            VERSION=${VERSION#v}
            echo "Version from tag push: $VERSION"
          else
            # Use manual input for workflow_dispatch
            VERSION="${{ github.event.inputs.version }}"
            if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
              echo "‚ö†Ô∏è version input is empty, using default"
              VERSION="2.0.7"
            fi
            echo "Version from manual input: $VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
          # Validate version format (allow test suffix)
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-test)?$'; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-test (e.g., 2.0.7 or 2.0.7-test)"
            exit 1
          fi
          echo "‚úÖ Version format valid: $VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          generate_release_notes: true
          token: ${{ secrets.PAT_TOKEN }}
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

      - name: Update typst.toml version
        run: |
          # Create backup and update version
          cp typst.toml typst.toml.backup
          sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.version }}"/' typst.toml
          
          echo "=== Updated typst.toml ==="
          echo "Original version:"
          grep '^version = ' typst.toml.backup
          echo "New version:"
          grep '^version = ' typst.toml

      - name: Prepare package files
        run: |
          # Create package directory structure
          PACKAGE_DIR="packages/preview/brilliant-cv/${{ steps.version.outputs.version }}"
          mkdir -p "$PACKAGE_DIR"
          
          echo "=== Preparing package files ==="
          echo "Target directory: $PACKAGE_DIR"
          
          # Copy all files except excluded ones (from typst.toml exclude list)
          rsync -av \
            --exclude='.git' \
            --exclude='docs' \
            --exclude='.pre-commit-config.yaml' \
            --exclude='.gitignore' \
            --exclude='.github' \
            --exclude='packages' \
            --exclude='typst.toml.backup' \
            . "$PACKAGE_DIR/"
          
          echo "=== Package structure ==="
          find "$PACKAGE_DIR" -type f | sort
          
          echo "=== Package typst.toml content ==="
          cat "$PACKAGE_DIR/typst.toml"
          
          echo "=== Package size ==="
          du -sh "$PACKAGE_DIR"
          
          # Validate required files exist
          if [ ! -f "$PACKAGE_DIR/typst.toml" ]; then
            echo "‚ùå Missing typst.toml in package"
            exit 1
          fi
          
          if [ ! -f "$PACKAGE_DIR/lib.typ" ]; then
            echo "‚ùå Missing lib.typ (entrypoint) in package"
            exit 1
          fi
          
          echo "‚úÖ Package validation passed"

      - name: Create PR in upstream repository
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "=== Creating PR in upstream repository ==="
          
          # Store the absolute path to the main workflow directory
          MAIN_DIR="$(pwd)"
          echo "Main workflow directory: $MAIN_DIR"
          
          # Set up git config and authentication first
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          gh auth setup-git
          
          # Clone your existing fork of the typst/packages repository
          echo "=== Using existing fork: yunanwg/our-Typst-packages ==="
          gh repo clone yunanwg/our-Typst-packages temp-fork
          cd temp-fork
          
          # Add upstream remote (if it doesn't exist)
          if ! git remote get-url upstream >/dev/null 2>&1; then
            git remote add upstream https://github.com/typst/packages.git
          fi
          
          # Fetch latest from upstream and sync fork
          git fetch upstream
          git checkout main
          git reset --hard upstream/main
          git push origin main --force
          
          # Create new branch for package submission (delete if exists)
          BRANCH_NAME="brilliant-cv-${{ steps.version.outputs.version }}"
          
          # Delete branch if it exists (both local and remote)
          if git show-ref --verify --quiet refs/heads/$BRANCH_NAME; then
            echo "‚ö†Ô∏è Local branch $BRANCH_NAME exists, deleting..."
            git branch -D $BRANCH_NAME
          fi
          
          if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
            echo "‚ö†Ô∏è Remote branch $BRANCH_NAME exists, deleting..."
            git push origin --delete $BRANCH_NAME
          fi
          
          git checkout -b "$BRANCH_NAME"
          
          # Copy package files from the correct location
          mkdir -p "packages/preview/brilliant-cv"
          cp -r "$MAIN_DIR/packages/preview/brilliant-cv/${{ steps.version.outputs.version }}" "packages/preview/brilliant-cv/"
          
          # Commit changes
          git add .
          git commit -m "bump: brilliant-cv to v${{ steps.version.outputs.version }}

          Update brilliant-cv package to version ${{ steps.version.outputs.version }}"
          
          # Push branch to YOUR fork (auth already set up)
          git push -u origin "$BRANCH_NAME"
          
          # Create PR from your fork to upstream
          gh pr create \
            --repo typst/packages \
            --title "brilliant-cv:${{ steps.version.outputs.version }}" \
            --body "I am submitting
          - [ ] a new package
          - [X] an update for a package
          
          Description: This update brings brilliant-cv to version ${{ steps.version.outputs.version }}.
          
          I have read and followed the submission guidelines and, in particular, I
          - [X] selected [a name](https://github.com/typst/packages/blob/main/docs/manifest.md#naming-rules) that isn't the most obvious or canonical name for what the package does
          - [X] added a [\`typst.toml\`](https://github.com/typst/packages/blob/main/docs/manifest.md#package-metadata) file with all required keys
          - [X] added a [\`README.md\`](https://github.com/typst/packages/blob/main/docs/documentation.md) with documentation for my package
          - [X] have chosen [a license](https://github.com/typst/packages/blob/main/docs/licensing.md) and added a \`LICENSE\` file or linked one in my \`README.md\`
          - [X] tested my package locally on my system and it worked
          - [X] [\`exclude\`d](https://github.com/typst/packages/blob/main/docs/tips.md#what-to-commit-what-to-exclude) PDFs or README images, if any, but not the LICENSE
          - [X] ensured that my package is licensed such that users can use and distribute the contents of its template directory without restriction, after modifying them through normal use." \
            --head "yunanwg:$BRANCH_NAME" \
            --base main

          echo "‚úÖ PR created successfully from fork to upstream repository"
          
          # Return to main directory for cleanup
          cd "$MAIN_DIR"

      - name: Upload package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: brilliant-cv-${{ steps.version.outputs.version }}
          path: packages/preview/brilliant-cv/${{ steps.version.outputs.version }}/
          retention-days: 7

      - name: Workflow Summary
        run: |
          echo "=== RELEASE AND PUBLISH COMPLETED ==="
          echo "‚úÖ Version: ${{ steps.version.outputs.version }}"
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "‚úÖ GitHub release created: v${{ steps.version.outputs.version }}"
          fi
          echo "‚úÖ PR created in: typst/packages"
          echo "‚úÖ Package uploaded as workflow artifact"
          echo ""
          echo "üîó **Next Steps:**"
          echo "1. Visit https://github.com/typst/packages to review the PR"
          echo "2. Monitor the PR for any feedback from maintainers"
          echo "3. Once merged, the package will be available via @preview/brilliant-cv:${{ steps.version.outputs.version }}"
          echo "4. Update your documentation with the new import statement"
          
          # Restore original typst.toml
          if [ -f "typst.toml.backup" ]; then
            mv typst.toml.backup typst.toml
            echo "‚úÖ Original typst.toml restored"
          fi
